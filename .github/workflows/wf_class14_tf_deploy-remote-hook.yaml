# name: "App Deploy - From Webhook"

# on:
#   repository_dispatch:
#     types: [trigger-workflow]
#   workflow_dispatch:

# env:
#   environment: ${{ github.event.client_payload.environment }}
#   region: "ap-south-1"
#   deployment_info: ${{ github.event.client_payload.deployment_info }}
#   image_tag: ${{ github.event.client_payload.image_tag }}

# jobs:
#   deploy:
#     name: deploy
#     runs-on: ubuntu-latest

#     steps:
#       - name: print env
#         run: |
#           echo "Image tag: ${{ env.image_tag }} "
#           echo "environment: ${{ env.environment }}"

#       - name: Configure AWS Credentials
#         if: ${{ github.ref == 'refs/heads/main' }}
#         uses: aws-actions/configure-aws-credentials@v3
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.region }}

#       - name: Fetch secrets from AWS Secrets Manager
#         id: fetch-secrets
#         uses: aws-actions/aws-secretsmanager-get-secrets@v2
#         with:
#           secret-ids: |
#             ,${{ env.environment }}-${{ env.deployment_info }}
#           parse-json-secrets: true

#       - name: Download task definition for web
#         run: |
#           aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
#           --query taskDefinition > task-definition.json
#           ls -l task-definition.json

#       - name: Fill in the new image ID for web in the Amazon ECS task definition
#         id: task-def-web
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: task-definition.json
#           container-name: ${{ env.ECS_APP_CONTAINER_NAME }}
#           image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.event.client_payload.image_tag }}

#       - name: Deploy app on Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#         with:
#           task-definition: ${{ steps.task-def-web.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true